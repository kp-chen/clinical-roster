version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: clinical_roster
      POSTGRES_USER: ${DB_USER:-roster_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-roster_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${DB_USER:-roster_user}:${DB_PASSWORD:-secure_password}@db:5432/clinical_roster
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      FIELD_ENCRYPTION_KEY: ${FIELD_ENCRYPTION_KEY}
      FLASK_ENV: production
      MAIL_SERVER: ${MAIL_SERVER}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - ../uploads:/app/uploads
      - ../logs:/app/logs
    ports:
      - "${APP_PORT:-5000}:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../static:/usr/share/nginx/html/static:ro
      - nginx_logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Background task worker
  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A app.celery worker --loglevel=info
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      DATABASE_URL: postgresql://${DB_USER:-roster_user}:${DB_PASSWORD:-secure_password}@db:5432/clinical_roster
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      FIELD_ENCRYPTION_KEY: ${FIELD_ENCRYPTION_KEY}
    volumes:
      - ../uploads:/app/uploads
      - ../logs:/app/logs

  # Optional: Celery beat for scheduled tasks
  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A app.celery beat --loglevel=info
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      DATABASE_URL: postgresql://${DB_USER:-roster_user}:${DB_PASSWORD:-secure_password}@db:5432/clinical_roster
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      FIELD_ENCRYPTION_KEY: ${FIELD_ENCRYPTION_KEY}

  # Optional: Flower for Celery monitoring
  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A app.celery flower
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
    ports:
      - "${FLOWER_PORT:-5555}:5555"

volumes:
  postgres_data:
  redis_data:
  nginx_logs: